const axios = require('axios');

/**
 * Service pour effectuer des recherches web via l'API Serper
 * Encapsule tous les appels √† l'API externe Serper
 */

/**
 * Effectue une recherche web via l'API Serper
 * @param {string} query - La requ√™te de recherche
 * @returns {Promise<Array>} Tableau d'objets { title, link, snippet }
 */
async function search(query) {
  if (!query || typeof query !== 'string' || query.trim().length === 0) {
    console.warn('webSearchService.search: Requ√™te vide ou invalide');
    return [];
  }

  const apiKey = process.env.SERPER_API_KEY;
  if (!apiKey) {
    throw new Error('SERPER_API_KEY non configur√©e dans les variables d\'environnement');
  }

  console.log(`üîç Recherche web Serper: "${query}"`);

  try {
    const response = await axios.post(
      'https://google.serper.dev/search',
      {
        q: query,
        num: 10, // Nombre de r√©sultats √† r√©cup√©rer
        gl: 'fr', // G√©olocalisation France
        hl: 'fr'  // Langue fran√ßaise
      },
      {
        headers: {
          'X-API-KEY': apiKey,
          'Content-Type': 'application/json'
        },
        timeout: 15000 // Timeout de 15 secondes
      }
    );

    if (!response.data || !response.data.organic) {
      console.warn(`webSearchService.search: Aucun r√©sultat organique trouv√© pour "${query}"`);
      return [];
    }

    // Formater les r√©sultats selon le format attendu
    const results = response.data.organic.map(result => ({
      title: result.title || 'Titre non disponible',
      link: result.link || '',
      snippet: result.snippet || 'Extrait non disponible'
    }));

    console.log(`‚úÖ webSearchService.search: ${results.length} r√©sultats trouv√©s pour "${query}"`);
    return results;

  } catch (error) {
    console.error(`‚ùå webSearchService.search: Erreur lors de la recherche "${query}":`, error.message);
    
    // En cas d'erreur, retourner un tableau vide plut√¥t que de faire √©chouer tout le processus
    if (error.response) {
      console.error(`Statut HTTP: ${error.response.status}, Donn√©es: ${JSON.stringify(error.response.data)}`);
    }
    
    return [];
  }
}

/**
 * Effectue plusieurs recherches en parall√®le avec gestion d'erreurs
 * @param {Array<string>} queries - Tableau de requ√™tes de recherche
 * @returns {Promise<Array>} Tableau de tous les r√©sultats agr√©g√©s
 */
async function searchMultiple(queries) {
  if (!Array.isArray(queries) || queries.length === 0) {
    console.warn('webSearchService.searchMultiple: Aucune requ√™te fournie');
    return [];
  }

  console.log(`üîç Recherche multiple Serper: ${queries.length} requ√™tes`);

  try {
    // Ex√©cuter toutes les recherches en parall√®le
    const searchPromises = queries.map(query => search(query));
    const results = await Promise.all(searchPromises);
    
    // Agr√©ger tous les r√©sultats en un seul tableau
    const aggregatedResults = results.flat();
    
    // Supprimer les doublons bas√©s sur l'URL
    const uniqueResults = aggregatedResults.filter((result, index, self) => 
      index === self.findIndex(r => r.link === result.link)
    );

    console.log(`‚úÖ webSearchService.searchMultiple: ${uniqueResults.length} r√©sultats uniques agr√©g√©s`);
    return uniqueResults;

  } catch (error) {
    console.error('‚ùå webSearchService.searchMultiple: Erreur lors des recherches multiples:', error.message);
    return [];
  }
}

module.exports = {
  search,
  searchMultiple
};